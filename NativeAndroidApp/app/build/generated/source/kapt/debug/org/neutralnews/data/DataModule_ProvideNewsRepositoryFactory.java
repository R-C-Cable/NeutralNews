// Generated by Dagger (https://dagger.dev).
package org.neutralnews.data;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("org.neutralnews.data.AuthorizedAccess")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class DataModule_ProvideNewsRepositoryFactory implements Factory<NewsRepository> {
  private final Provider<NewsDataSource> newsDataSourceProvider;

  public DataModule_ProvideNewsRepositoryFactory(Provider<NewsDataSource> newsDataSourceProvider) {
    this.newsDataSourceProvider = newsDataSourceProvider;
  }

  @Override
  public NewsRepository get() {
    return provideNewsRepository(newsDataSourceProvider.get());
  }

  public static DataModule_ProvideNewsRepositoryFactory create(
      Provider<NewsDataSource> newsDataSourceProvider) {
    return new DataModule_ProvideNewsRepositoryFactory(newsDataSourceProvider);
  }

  public static NewsRepository provideNewsRepository(NewsDataSource newsDataSource) {
    return Preconditions.checkNotNullFromProvides(DataModule.INSTANCE.provideNewsRepository(newsDataSource));
  }
}
