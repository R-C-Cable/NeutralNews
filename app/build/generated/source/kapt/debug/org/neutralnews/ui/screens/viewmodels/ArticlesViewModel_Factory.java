// Generated by Dagger (https://dagger.dev).
package org.neutralnews.ui.screens.viewmodels;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import org.neutralnews.data.NewsRepository;

@ScopeMetadata
@QualifierMetadata("org.neutralnews.data.AuthorizedAccess")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class ArticlesViewModel_Factory implements Factory<ArticlesViewModel> {
  private final Provider<NewsRepository> repositoryProvider;

  public ArticlesViewModel_Factory(Provider<NewsRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public ArticlesViewModel get() {
    return newInstance(repositoryProvider.get());
  }

  public static ArticlesViewModel_Factory create(Provider<NewsRepository> repositoryProvider) {
    return new ArticlesViewModel_Factory(repositoryProvider);
  }

  public static ArticlesViewModel newInstance(NewsRepository repository) {
    return new ArticlesViewModel(repository);
  }
}
